QUESTION 1 (b)
#include <iostream>
#include <string>
using namespace std;
class Animal {
public:
    virtual void makeSound() const = 0;
    virtual ~Animal() {}
};
class Dog : public Animal {
private:
    string breed;
public:
    Dog(string b) : breed(b) {}
    void makeSound() const  {
        cout << "Woof! Woof!" << endl;
    }
    void displayBreed() const {
        cout << "Breed: " << breed << endl;
    }
};
class Cat : public Animal {
private:
    string color;
public:
    Cat(string c) : color(c) {}

    void makeSound() const  {
        cout << "Meow! Meow!" << endl;
    }
    void displayColor() const {
        cout << "Color: " << color << endl;
    }
};
int main() {
    Dog myDog("Golden Retriever");
    Cat myCat("Siamese");
    Animal *animal1 = &myDog;
    Animal *animal2 = &myCat;
    cout << "*********DOG INFORMATION *********" << endl;
    myDog.displayBreed();
    animal1->makeSound();
    cout << "*********CAT INFORMATION*********" << endl;
    myCat.displayColor();
    animal2->makeSound();
    return 0;
}






QUESTION NO.2
#include<iostream>
#include<string>
using namespace std;
class Product
 {
public:
    int product_id;
    string product_name;
    double product_price;

    Product(int id, string name, double price)
     {
        product_id = id;
        product_name = name;
        product_price = price;
    }

    void display_product_details()
     {
        cout << "ID of product is " << product_id << endl;
        cout << "Name of the product is " << product_name << endl;
        cout << "Price of the product is $" << product_price << endl;
    }
};
class Shopping_cart
{
private:
    Product** products;
    int capacity;
    int size;

public:
    Shopping_cart(int capacity) : capacity(capacity), size(0)
     {
        products = new Product*[capacity];
    }
    ~Shopping_cart()
    {
        delete[] products;
    }
    void add_product(Product* product)
    {
        if (size < capacity)
            {
            products[size++] = product;
        }
        else
        {
            cout << "You cannot add more items because the shopping cart is full." << endl;
        }
    }

    void display_all_products()
     {
        cout << "Products in your cart are" << endl;
        for (int i = 0; i < size; ++i)
            {
            products[i]->display_product_details();
        }
    }
    double calculate_total_cost()
    {
        double totalCost = 0.0;
        for (int i = 0; i < size; ++i)
            {
            totalCost += products[i]->product_price;
        }
        return totalCost;
    }
};
class User
 {
public:
    int userId;
    Shopping_cart* shopping_cart;

    User(int id) : userId(id), shopping_cart(nullptr) {}

    void display_user_details()
     {
        cout << "Id used by user is " << userId << endl;
        if (shopping_cart)
            {
            cout << "DETAILS OF SHOPPING CART" << endl;
            shopping_cart->display_all_products();
            cout << "Total cost of products: $" << shopping_cart->calculate_total_cost() << endl;
        }
        else
        {
            cout << "No shopping cart is associated with this id." << endl;
        }
    }
};

int main()
 {
    
    Product product1(1, "BAT", 999.99);
    Product product2(2, "BOWI", 499.99);
    User user1(110);
    Shopping_cart cart(2);
    cart.add_product(&product1);
    cart.add_product(&product2);
    user1.shopping_cart = &cart;
    user1.display_user_details();
    return 0;
}
